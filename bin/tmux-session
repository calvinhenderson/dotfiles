#!/usr/bin/env sh

SEARCH_DIRS="$HOME/Projects/* $HOME/Documents/Projects/*"
TMUX_SESSION_ICON="󰖯"
DIRECTORY_ICON="󰉋"
GIT_REPO_ICON="󰊢"
CUSTOM_COMMAND_ICON=""

prompt_continue() {
  if [ -n "$1" ]; then
    printf "$1 (Y/n)"
  else
    printf "Continue (Y/n)"
  fi

  read -r response
  case $(echo $response | tr '[:upper:]' '[:lower:]') in
    "n" | "no") return 1 ;;
    *) return 0 ;;
  esac
}

name_session() { basename "$1" | tr . _; }

# args: session_name
attach_session() {
  if [ -z "$TMUX" ]; then
    tmux attach-session -dt "$1"
  else
    tmux switch-client -t "$1"
  fi
}

# args: "icon project_path"
maybe_strip_icon_prefix() {
  echo "$1" | sed \
    -e "s/^$TMUX_SESSION_ICON[[:space:]]*//" \
    -e "s/^$DIRECTORY_ICON[[:space:]]*//" \
    -e "s/^$GIT_REPO_ICON[[:space:]]*//" \
    -e "s/^$CUSTOM_COMMAND_ICON[[:space:]]*//"
}

# args: dir
create_and_attach_session() {
  session_name=$(name_session "$1")
  echo "$session_dir"
  tmux new-session -ds "$session_name" -c "$1"
  attach_session "$session_name"
}

select_project() {
  # Get a list of active tmux sessions
  sessions="$(if tmux run 2> /dev/null; then tmux list-sessions | awk -F: '{print $1}'; fi)"

  # Combine the sessions and project directories lists
  options=$({
      printf "$sessions\n"
      ls -1dt $SEARCH_DIRS 2>/dev/null
      echo "Clone Repository"
      echo "New Project"
    } | tr '\n' ':' | sed -e 's/^://')

  # Rice the options list before displaying to the user
  display_options=""
  IFS=$':'; for option in $options; do
    if expr "$sessions" : "^.*$option.*$" 1>/dev/null; then
      prefix="$TMUX_SESSION_ICON"
    elif [ -d "$option/.git" ]; then
      prefix="$GIT_REPO_ICON"
    elif [ -d "$option" ]; then
      prefix="$DIRECTORY_ICON"
    else
      prefix="$CUSTOM_COMMAND_ICON"
    fi
    display_options="$display_options$prefix $option\n"
  done

  display_options=$(echo "$display_options" | sed -e 's/\n$//')

  if [ $# -eq 1 ]; then
    create_and_attach_session "$1"
    return 0
  fi

  nr=""
  if command -v fzf > /dev/null; then
    selected_row=$(echo $display_options | fzf)
    [ $? -ne 0 ] && exit 0
  else
    i=0
    echo "$display_options" | while read -r option; do
      i=$(echo "$i + 1" | bc)
      echo "$i. $option"
    done

    printf "Enter a number: "
    read -r nr
    selected_row=$(echo $display_options | head -n${nr} | tail -n1 | sed 's/^[0-9]\+\.//')
  fi

  selected_name=$(maybe_strip_icon_prefix "$selected_row")

  case "$selected_row" in
    "$TMUX_SESSION_ICON"*)
      # Attach to an existing tmux session
      attach_session "$selected_name";;
    "$GIT_REPO_ICON"*|"$DIRECTORY_ICON"*)
      # Create a new session for the repo/directory
      create_and_attach_session "$selected_name";;
    *"Clone Repository")
      printf "Enter the git clone URL: "; read -r clone_url

      name=$(
        echo "$clone_url" \
        | egrep -o '[^\/:\.]*(\.git)?$' \
        | cut -f1 -d'.' \
        | tr ':/' '_'
      )

      printf "Enter the project name (default $name): "; read -r in_name
      [ -n "$in_name" ] && name="$in_name"

      selected="$HOME/Projects/$name"

      git clone "$clone_url" "$selected"

      [ $? -ne 0 ] && select_project "$selected_row"

      create_and_attach_session "$selected"
      ;;
    *"New Project")
      # Create a new project
      printf "Enter the project name: "; read -r name

      selected_name="$HOME/Projects/$name"
      mkdir -p "$selected_name"

      # Optionally, initilize a git repository
      prompt_continue "Make git repo" && {
        cd "$selected_name" && git init
      }

      # Create a new tmux session and attach
      create_and_attach_session "$selected_name"
      ;;
    *)
      echo "no selection was made. exiting."
      exit 0
      ;;
  esac
}

select_project $@
